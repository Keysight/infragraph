openapi: 3.0.3
info:
  title: Infrastructure as a Graph
  description: |-
    ### Overview
    Infrastructure as a Graph defines a model-driven, vendor-neutral, standard
    interface for capturing a system of systems suitable for use in co-designing AI/HPC solutions.

    This model allows for defining physical infrastructure as a logical system of systems using graph like terminology.
    In addition to defining a logical graph, an unlimited number of different physical characteristics
    can be associated with logical endpoints.

    ### Graph Terminology
    - `vertex` is the fundamental unit or entity within a graph; represented as a point. In this model it is one of the following:
      - a combination of a component name and a 0 based index such as `asic.0`
      - a device instance name, a 0 based index, an external component and a 0 based index such as `host.0.nic.0`.
    - `edge` is a connection between two vertices in a graph. It can be a connection between two component instances or two device instances. The connection also includes a logical label for identifying the type of link between the two vertexes, for example `asic.0`.`ic`.`port.0`
    - `path` is a sequence of connections that allows for traversal through the graph

    ### Contributions
    Contributions to the API and models schema can be made in the following ways:
    - [open an issue](https://github.com/infrasrtucture/issues) in the models repository
    - [fork the models repository](https://github.com/infrastructure) and submit a PR
  version: 0.1.0
  contact:
    url: https://github.com/ajbalogh/infrastructure
  license:
    name: MIT
    url: https://opensource.org/licenses/MIT
  x-model-guide: https://github.com/ajbalogh/infrastructure/blob/master/MODEL-GUIDE.md
servers:
- url: /
paths:
  /validate:
    post:
      tags:
      - Configuration
      operationId: validate
      x-stream: client
      description: |-
        Validate an infrastructure configuration.
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Infrastructure'
      responses:
        '200':
          $ref: '#/components/responses/Success'
          x-field-uid: 1
        default:
          $ref: '#/components/responses/Failure'
          x-field-uid: 2
components:
  responses:
    Success:
      description: |-
        The request has succeeded with no application content but the server
        may return a list of detailed warnings.
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/Warning'
    Failure:
      description: |-
        The request did not succeed and server has responded with error details.
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/Error'
  schemas:
    Infrastructure:
      type: object
      properties:
        name:
          description: |-
            The name of the infrastructure being described.
            Globally unique name of an object. It also serves as the primary key for arrays of objects.
          example: Two Tier Clos Fabric
          x-field-uid: 1
          type: string
          pattern: ^[\sa-zA-Z0-9-_()><\[\]]+$
          x-unique: global
        description:
          description: |-
            A description of the infrastructure being described.
          type: string
          example: 'The example fields in this schema are based on

            the Two Tier Clos Fabric Case Study outlined

            in the GraphIt documentation `Getting Started`

            subsection.'
          x-field-uid: 2
        devices:
          description: |-
            An inventory of the devices present in the infrastructure connections.
          type: array
          items:
            $ref: '#/components/schemas/Device'
          example:
          - description: generic server
            instances:
            - count: 4
          - description: generic switch
            instances:
            - name: leaf
              count: 4
            - name: spine
              count: 3
          x-field-uid: 3
        links:
          description: |-
            An inventory of the links that are part of the infrastructure connections property.
          type: array
          items:
            $ref: '#/components/schemas/Link'
          example:
          - name: eth
          x-field-uid: 4
        connections:
          description: |-
            Connections define the graph with each connection consisting of the following criteria in a string separated by dots:
            - `Device.Instance.property.name` e.g., host
            - a 0 based index that is less than `Device.Instance.property.count` e.g., 0
            - `Component.property.name` where `Component.property.external` is true e.g., nic
            - a 0 based index that is less than `Component.property.count` e.g., 0
            - `Infrastructure.properties.links.property.name`
            - `Device.Instance.property.name` e.g., leafsw
            - a 0 based index that is less than `Device.Instance.property.count` e.g., 0
            - `Component.property.name` where `Component.property.external` is true e.g., port
            - a 0 based index that is less than `Component.property.count` e.g., 0

            The example pieces are concatenated using a dot notation and would form the following connection string `host.0.nic.0.eth.leafsw.0.port.0`.
          type: array
          items:
            type: string
          x-field-uid: 5
        annotations:
          description: |-
            Annotations are meant to be used to correlate static and/or dynamic information
            (e.g., configuration, routing etc) that is not covered by the schema to logical endpoints.

            Examples:
            - host.0.nic.0 can be associated with detailed nic configuration attributes that are outside of the scope of this schema.
          type: array
          items:
            $ref: '#/components/schemas/Annotation'
          x-field-uid: 6
    Device:
      description: |-
        A subgraph container for a device and its components, links and connections.
        The connections form a subgraph.

        e.g., Describe a switch device in detail.

        At a simple level a switch has an asic and ports.
        The asic can be made up of of core, mem, crypt, alu, dsp, pll, ics (interconnect structure), iop (i/o pad).
        The Device can capture just the asic and ports connected by an integrated circuit or
        the asic can be broken down into more discrete components.

        Simple Approach: asic, cpu, port, ic
        Detailed Approach: cpu, core, mem, alu, pll, iop, ic, port

        name: arista
        description: |-
          The Arista is a network switch platform,
          commonly equipped with 48 x 1G Ethernet ports and 4 x 10G uplink ports,
          typically implemented using a Jericho2 ASIC
        components: [core, mem, crypt, alu, iop, port]
        links: [ics]
        connections:
            - core.0.ics.mem.0
            - core.0.ics.crypt.0
            - core.0.ics.alu.0
            - core.0.ics.iop.0
            - core.0.ics.iop.47
            - iop.0.ics.port.0
            ...
            - iop.47.ics.port.47

        - to traverse from the core asic to a port, multiple connections are used to form a path
          - core.0.ics.iop.0.ics.port.0
      type: object
      required:
      - description
      - instances
      properties:
        description:
          description: |-
            A description of the device.
            This will not be used in Infrastructure.connections.
          type: string
          example: NVIDIA DGX A100 high-performance AI system
          x-field-uid: 1
        components:
          type: array
          items:
            $ref: '#/components/schemas/Component'
          x-field-uid: 2
        links:
          description: |-
            All the links that make up this device.
          type: array
          items:
            $ref: '#/components/schemas/Link'
          x-field-uid: 3
        connections:
          description: |-
            All the connections of components that are within this device.

            Connections are of the form `Component.name.index`.`Link.name`.`Component.name.index`
            The `index` in the connection string is 0 based and must be >=0 and < Component.count.

            This allows components to be connected to whatever depth is needed.
          type: array
          items:
            type: string
          x-field-uid: 4
        instances:
          description: |-
            A collection of instance objects.

            An instance object is used to create `n` number of instances of this device
            under a specific name that is used in infrastructure connections.

            This allows for multiple instances of this device under different names creating different
            roles/categories for the same device.

            e.g.,
              - a device can be described as a `th5 switch` but instantiated as
                - 4 `leaf` switches
                - 3 `spine` switches
          type: array
          items:
            $ref: '#/components/schemas/Device.Instance'
          minItems: 1
          example:
          - name: server
            count: 2
            description: Server instances of the DGX-A100 device
          x-field-uid: 5
    Component:
      description: |-
        A container for describing a component.
        A Component is contained in a Device.
        A Component can be composed of sub components by using the components property.
      type: object
      required:
      - name
      - type
      properties:
        name:
          x-field-uid: 1
          description: |-
            Globally unique name of an object. It also serves as the primary key for arrays of objects.
          type: string
          pattern: ^[\sa-zA-Z0-9-_()><\[\]]+$
          x-unique: global
        description:
          description: |-
            A description of the component.
          type: string
          x-field-uid: 2
        type:
          description: |-
            Type of component.
            Any component not listed can be defined using the custom type.
          type: string
          x-field-uid: 3
          x-enum:
            custom:
              x-field-uid: 1
            cpu:
              x-field-uid: 2
            npu:
              x-field-uid: 3
            nic:
              x-field-uid: 4
          enum:
          - custom
          - cpu
          - npu
          - nic
        count:
          description: |-
            The maximum number of components that can appear in the device connections.

            The `count` should be used to validate Device.connections where the index in the connections
            should never be >= this value.
          type: number
          minimum: 1
          x-field-uid: 4
        external:
          description: |-
            Indicates whether this component is an ingress/egress component in a device.
            Only those components that have this property set to true can be used in an infrastructure connection.
          type: boolean
          default: false
          x-field-uid: 5
        components:
          description: |-
            This recursive property allows for a component to be described in more detail.
          type: array
          items:
            $ref: '#/components/schemas/Component'
          default: false
          x-field-uid: 6
    Link.Physical.Bandwidth:
      description: |-
        A container for specific Link physical Properties.
      type: object
      properties:
        choice:
          type: string
          x-field-uid: 1
          x-enum:
            g_bits_per_second:
              x-field-uid: 1
            g_bytes_per_second:
              x-field-uid: 2
            g_transfers_per_second:
              x-field-uid: 3
          enum:
          - g_bits_per_second
          - g_bytes_per_second
          - g_transfers_per_second
        g_bits_per_second:
          description: |-
            Giga bits per second.
          type: number
          x-field-uid: 2
        g_bytes_per_second:
          description: |-
            Giga bytes per second.
          type: number
          x-field-uid: 3
        g_transfers_per_second:
          description: |-
            Giga trasfers per second.
          type: number
          x-field-uid: 4
    Link.Physical:
      type: object
      properties:
        bandwidth:
          $ref: '#/components/schemas/Link.Physical.Bandwidth'
          x-field-uid: 1
    Link:
      description: |-
        A container for describing a link used between components.
      type: object
      required:
      - name
      properties:
        name:
          x-field-uid: 1
          description: |-
            Globally unique name of an object. It also serves as the primary key for arrays of objects.
          type: string
          pattern: ^[\sa-zA-Z0-9-_()><\[\]]+$
          x-unique: global
        description:
          description: |-
            A description of the type of link.
          type: string
          x-field-uid: 2
        physical:
          description: |-
            A container for physical properties.
          $ref: '#/components/schemas/Link.Physical'
          x-field-uid: 3
    Device.Instance:
      type: object
      required:
      - name
      - count
      properties:
        name:
          description: |-
            An alias for the device that MUST be used in the Infrastructure.connections property.
            Globally unique name of an object. It also serves as the primary key for arrays of objects.
          x-field-uid: 1
          type: string
          pattern: ^[\sa-zA-Z0-9-_()><\[\]]+$
          x-unique: global
        description:
          description: |-
            A description of the instance.
          type: string
          x-field-uid: 2
        count:
          description: |-
            The maximum number of device instances that can be created under the name.
          type: number
          x-field-uid: 3
    Annotation.Json:
      type: object
      properties:
        description:
          type: string
          x-field-uid: 1
        data:
          description: |-
            A json object serialized as a string.
          type: string
          x-field-uid: 2
    Annotation.Yaml:
      type: object
      properties:
        description:
          type: string
          x-field-uid: 1
        data:
          description: |-
            A yaml object serialized as a string.
          type: string
          x-field-uid: 2
    Annotation.Protobuf:
      type: object
      properties:
        description:
          type: string
          x-field-uid: 1
        data:
          description: |-
            A protobuf object serialized as a binary string.
          type: string
          x-format: binary
          x-field-uid: 2
    Annotation:
      description: |-
        A way to associate any kind of additional information to a logical endpoint.
        This allows for structured messages such as openconfig configuration information instances to be
        linked to a specific component, device instance etc.
      type: object
      properties:
        endpoint:
          description: |-
            A logical endpoint can be formed using the defined constraints and MUST be validated that
            they exist in the Infrastructure message:
            - `Device.properties.name`
            - `Device.properties.name`.`Component.properties.name`
            - `Device.Instance.properties.name`.`device index`
            - `Device.Instance.properties.name`.`device index`.`Component.properties.name`.`component index`
            - `Device.properties.name`.`Device.properties.links`
            - `Infrastructure.properties.links`
            - `Infrastructure.properties.name`
          type: string
          x-field-uid: 1
        choice:
          description: |-
            Type of annotation data.
          type: string
          x-field-uid: 2
          x-enum:
            json:
              x-field-uid: 1
            yaml:
              x-field-uid: 2
            protobuf:
              x-field-uid: 3
          enum:
          - json
          - yaml
          - protobuf
        json:
          $ref: '#/components/schemas/Annotation.Json'
          x-field-uid: 3
        yaml:
          $ref: '#/components/schemas/Annotation.Yaml'
          x-field-uid: 4
        protobuf:
          $ref: '#/components/schemas/Annotation.Protobuf'
          x-field-uid: 5
    Error:
      description: |-
        Error response generated while serving API request.
      type: object
      required:
      - code
      - errors
      properties:
        code:
          description: |-
            Numeric status code based on the underlying transport being used.
            The API server MUST set this code explicitly based on following references:
              - HTTP 4xx errors: https://datatracker.ietf.org/doc/html/rfc9110#section-15.5
              - HTTP 5xx errors: https://datatracker.ietf.org/doc/html/rfc9110#section-15.6
              - gRPC errors: https://grpc.github.io/grpc/core/md_doc_statuscodes.html
          type: integer
          format: int32
          x-field-uid: 1
        kind:
          description: |-
            Classification of error originating from within API server that may not be mapped to the value in `code`.
            Absence of this field may indicate that the error did not originate from within API server.
          type: string
          x-enum:
            validation:
              x-field-uid: 1
            internal:
              x-field-uid: 2
          x-field-uid: 2
          enum:
          - validation
          - internal
        errors:
          description: |-
            List of error messages generated while executing the request.
          type: array
          items:
            type: string
          x-field-uid: 3
    Warning:
      description: |-
        A list of warnings that have occurred while executing the request.
      type: object
      properties:
        warnings:
          description: |-
            A list of any system specific warnings that have occurred while
            executing the request.
          type: array
          items:
            type: string
          x-field-uid: 1
