openapi: 3.0.3
info:
  title: InfraGraph
  description: |-
    ### Overview
    InfraGraph or `infrastructure graph` defines a model-driven, vendor-neutral, standard
    interface for capturing a system of systems suitable for use in co-designing AI/HPC solutions.

    This model allows for defining physical infrastructure as a logical system of systems using graph like terminology.
    In addition to defining a logical graph, an unlimited number of different physical characteristics
    can be associated with logical endpoints.

    ### Graph Terminology
    - `vertex` is the fundamental unit or entity within a graph; represented as a point. In this model it is one of the following:
      - a combination of a component name and a 0 based index such as `asic.0`
      - a device instance name, a 0 based index, an external component and a 0 based index such as `host.0.nic.0`.
    - `edge` is a connection between two vertices in a graph. It can be a connection between two component instances or two device instances. The connection also includes a logical label for identifying the type of link between the two vertexes, for example `asic.0`.`ic`.`port.0`
    - `path` is a sequence of connections that allows for traversal through the graph

    ### Contributions
    Contributions to the API and models schema can be made in the following ways:
    - [open an issue](https://github.com/keysight/infragraph/issues) in the models repository
    - [fork the models repository](https://github.com/keysight/infragraph) and submit a PR
  version: 0.1.0
  contact:
    url: https://github.com/keysight/infragraph/issues
  license:
    name: MIT
    url: https://opensource.org/licenses/MIT
  x-model-guide: https://github.com/keysight/infragraph/blob/main/MODEL-GUIDE.md
servers:
- url: /
paths:
  /set_graph:
    post:
      tags:
      - Configuration
      operationId: set_graph
      x-stream: client
      description: |-
        Given an infrastructure payload this will create a complete infrastructure graph that has been validated.
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Infrastructure'
      responses:
        '200':
          $ref: '#/components/responses/Success'
          x-field-uid: 1
        default:
          $ref: '#/components/responses/Failure'
          x-field-uid: 2
components:
  responses:
    Success:
      description: |-
        The request has succeeded with no application content but the server
        may return a list of detailed warnings.
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/Warning'
    Failure:
      description: |-
        The request did not succeed and server has responded with error details.
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/Error'
  schemas:
    Infrastructure:
      type: object
      properties:
        name:
          description: |-
            The name of the infrastructure being described.
            Globally unique name of an object. It also serves as the primary key for arrays of objects.
          x-field-uid: 1
          type: string
          pattern: ^[\sa-zA-Z0-9-_()><\[\]]+$
          x-unique: global
        description:
          description: |-
            A description of the infrastructure being described.
          type: string
          x-field-uid: 2
        devices:
          description: |-
            An array of the devices and their components present in the infrastructure connections.
          type: array
          items:
            $ref: '#/components/schemas/Device'
          x-field-uid: 3
        links:
          description: |-
            An inventory of the links that are part of the infrastructure connections property.
          type: array
          items:
            $ref: '#/components/schemas/Link'
          x-field-uid: 4
        edges:
          description: |-
            These edges are used to connect device components to other device components
            forming a fully qualified graph based on the contents of the Infrastructure object.
          type: array
          items:
            $ref: '#/components/schemas/Infrastructure.Edge'
          x-field-uid: 5
        annotations:
          description: |-
            Annotations are meant to extend the current schema with any kind of additional data such as
            static, dynamic, logical and physical information (e.g., configuration, routing etc).
          type: array
          items:
            $ref: '#/components/schemas/Annotation'
          x-field-uid: 6
    Device:
      description: |-
        A subgraph container for a device and its components, links and connections.
        The connections form a subgraph.

        e.g., Describe a switch device in detail.

        At a simple level a switch has an asic and ports.
        The asic can be made up of of core, mem, crypt, alu, dsp, pll, ics (interconnect structure), iop (i/o pad).
        The Device can capture just the asic and ports connected by an integrated circuit or
        the asic can be broken down into more discrete components.

        Simple Approach: asic, cpu, port, ic
        Detailed Approach: cpu, core, mem, alu, pll, iop, ic, port

        name: arista
        description: |-
          The Arista is a network switch platform,
          commonly equipped with 48 x 1G Ethernet ports and 4 x 10G uplink ports,
          typically implemented using a Jericho2 ASIC
        components: [core, mem, crypt, alu, iop, port]
        links: [ics]
        connections:
            - core.0.ics.mem.0
            - core.0.ics.crypt.0
            - core.0.ics.alu.0
            - core.0.ics.iop.0
            - core.0.ics.iop.47
            - iop.0.ics.port.0
            ...
            - iop.47.ics.port.47

        - to traverse from the core asic to a port, multiple connections are used to form a path
          - core.0.ics.iop.0.ics.port.0
      type: object
      properties:
        name:
          description: |-
            The name of the device being described.
            Globally unique name of an object. It also serves as the primary key for arrays of objects.
          x-field-uid: 1
          type: string
          pattern: ^[\sa-zA-Z0-9-_()><\[\]]+$
          x-unique: global
        description:
          description: |-
            A description of the device.
            This will not be used in Infrastructure.connections.
          type: string
          x-field-uid: 2
        count:
          description: |-
            The number of instances of this device if not contained in another device.
            If the device is contained within another device the count is multiplied
            by the containing device count.
          type: number
          minimum: 1
          x-field-uid: 3
        components:
          type: array
          items:
            $ref: '#/components/schemas/Component'
          x-field-uid: 4
        links:
          description: |-
            All the links that make up this device.
          type: array
          items:
            $ref: '#/components/schemas/Link'
          x-field-uid: 5
        edges:
          description: |-
            An array of edges that are used to produce a device graph.
            These are used to connect components to each other or components
            to other device components (composability).
            The generated graph edges will be fully qualified using the count property
            of the device and component and slice notation of each endpoint in the edge object.
          type: array
          items:
            $ref: '#/components/schemas/Device.Edge'
          x-field-uid: 6
    Component:
      description: |-
        A container for describing a component.
        A Component is contained in a Device.
      type: object
      required:
      - type
      properties:
        name:
          x-field-uid: 1
          description: |-
            Globally unique name of an object. It also serves as the primary key for arrays of objects.
          type: string
          pattern: ^[\sa-zA-Z0-9-_()><\[\]]+$
          x-unique: global
        description:
          description: |-
            A description of the component.
          type: string
          x-field-uid: 2
        type:
          description: |-
            Type of component.
            Any component not listed as an enum can be defined using the custom type.
          type: string
          x-field-uid: 3
          x-enum:
            custom:
              x-field-uid: 1
            cpu:
              x-field-uid: 2
            npu:
              x-field-uid: 3
            nic:
              x-field-uid: 4
            memory:
              x-field-uid: 5
            port:
              x-field-uid: 6
          enum:
          - custom
          - cpu
          - npu
          - nic
          - memory
          - port
        external:
          description: |-
            Indicates whether this component is an ingress/egress component in a device.
            Only those components that have this property set to true can be used in an infrastructure connection.
          type: boolean
          default: false
          x-field-uid: 4
    Link.Physical.Bandwidth:
      description: |-
        A container for specific Link physical Properties.
      type: object
      properties:
        choice:
          type: string
          x-field-uid: 1
          x-enum:
            gigabits_per_second:
              x-field-uid: 1
            gigabytes_per_second:
              x-field-uid: 2
            gigatransfers_per_second:
              x-field-uid: 3
          enum:
          - gigabits_per_second
          - gigabytes_per_second
          - gigatransfers_per_second
        gigabits_per_second:
          description: |-
            Gigabits per second.
          type: number
          x-field-uid: 2
        gigabytes_per_second:
          description: |-
            Gigabytes per second.
          type: number
          x-field-uid: 3
        gigatransfers_per_second:
          description: |-
            Gigatrasfers per second.
          type: number
          x-field-uid: 4
    Link.Physical.Latency:
      description: |-
        A container for specific Link latency properties.
      type: object
      properties:
        choice:
          type: string
          x-field-uid: 1
          x-enum:
            ms:
              x-field-uid: 1
            us:
              x-field-uid: 2
            ns:
              x-field-uid: 3
          enum:
          - ms
          - us
          - ns
        ms:
          description: |-
            Latency in milliseconds
          type: number
          x-field-uid: 2
        us:
          description: |-
            Latency in microseconds.
          type: number
          x-field-uid: 3
        ns:
          description: |-
            Latency in nanoseconds.
          type: number
          x-field-uid: 4
    Link.Physical:
      type: object
      properties:
        bandwidth:
          $ref: '#/components/schemas/Link.Physical.Bandwidth'
          x-field-uid: 1
        latency:
          $ref: '#/components/schemas/Link.Physical.Latency'
          x-field-uid: 2
    Link:
      description: |-
        A container for describing a link used between components.
      type: object
      properties:
        name:
          x-field-uid: 1
          description: |-
            Globally unique name of an object. It also serves as the primary key for arrays of objects.
          type: string
          pattern: ^[\sa-zA-Z0-9-_()><\[\]]+$
          x-unique: global
        description:
          description: |-
            A description of the type of link.
          type: string
          x-field-uid: 2
        physical:
          description: |-
            A container for physical properties.
          $ref: '#/components/schemas/Link.Physical'
          x-field-uid: 3
    Device.Endpoint:
      type: object
      required:
      - component
      properties:
        device:
          description: |-
            An optional name of a device that contains the component.
            If the property is empty the name of the device is the parent of the edge object.
          type: string
          pattern: (.+?)\[(\d*):?(\d*):?(\d*)\]
          x-field-uid: 1
        component:
          description: |-
            The name of a component that exists in the containing device.
          type: string
          pattern: (.+?)\[(\d*):(\d*):?(\d*)\]
          x-field-uid: 2
    Infrastructure.Endpoint:
      type: object
      required:
      - device
      - component
      properties:
        device:
          description: |-
            The name of a device that contains the component and MUST exist
            in the infrastructure devices.
          type: string
          pattern: (.+?)\[(\d*):(\d*):?(\d*)\]
          x-field-uid: 1
        component:
          description: |-
            The name of a component that MUST exist in the containing device.
          type: string
          pattern: (.+?)\[(\d*):(\d*):?(\d*)\]
          x-field-uid: 2
    Infrastructure.Edge:
      type: object
      required:
      - ep1
      - ep2
      - many2many
      - link
      properties:
        ep1:
          description: |-
            A device and component that is one endpoint of the edge
          $ref: '#/components/schemas/Infrastructure.Endpoint'
          x-field-uid: 1
        ep2:
          description: |-
            A device and component that is the other endpoint of the edge
          required:
          - device
          - component
          $ref: '#/components/schemas/Infrastructure.Endpoint'
          x-field-uid: 2
        many2many:
          description: |-
            If true every endpoint from ep1 will form an edge with every endpoint from ep2.
            If false endpoints generated from ep1 and ep2 should be of the same length and
            will be assigned together in the order they appear in each list.
          type: boolean
          x-field-uid: 3
        link:
          description: |-
            The name of a link that defines additional characteristics of the edge.
            The name MUST exist in the links array of the infrastructure.
          type: string
          x-field-uid: 4
    Device.Edge:
      type: object
      required:
      - ep1
      - ep2
      - many2many
      - link
      properties:
        ep1:
          description: |-
            An optional device and component that is the other endpoint of the edge
          $ref: '#/components/schemas/Device.Endpoint'
          x-field-uid: 1
        ep2:
          description: |-
            An optional device and component that is the other endpoint of the edge
          $ref: '#/components/schemas/Device.Endpoint'
          x-field-uid: 2
        many2many:
          description: |-
            If true every endpoint from ep1 will form an edge with every endpoint from ep2.
            If false endpoints generated from ep1 and ep2 should be of the same length and
            will be assigned together in the order they appear in each list.
          type: boolean
          x-field-uid: 3
        link:
          description: |-
            The name of a link that defines additional characteristics of the edge.
            The name MUST exist in the links array of the containing device.
          type: string
          x-field-uid: 4
    Annotation.Data:
      description: |-
        User defined data.
      type: object
      properties:
        name:
          type: string
          x-field-uid: 1
      additionalProperties: true
    Annotation:
      description: |-
        Annotation allows for extending the base configuration with any type of
        additional information such as logical layouts, physical configuration etc.

        This allows an organization to add their own data structures or
        open source data such as openconfig configuration messages which can be
        correlated to specific configuration endpoints.
      type: object
      required:
      - name
      - data
      properties:
        name:
          description: |-
            An alias for the annotation data.
          type: string
          x-field-uid: 1
        data:
          description: |-
            The actual annotation data.
          $ref: '#/components/schemas/Annotation.Data'
          x-field-uid: 2
        schema:
          description: |-
            A schema that describes the annotation data.
          type: string
          x-field-uid: 3
    Error:
      description: |-
        Error response generated while serving API request.
      type: object
      required:
      - code
      - errors
      properties:
        code:
          description: |-
            Numeric status code based on the underlying transport being used.
            The API server MUST set this code explicitly based on following references:
              - HTTP 4xx errors: https://datatracker.ietf.org/doc/html/rfc9110#section-15.5
              - HTTP 5xx errors: https://datatracker.ietf.org/doc/html/rfc9110#section-15.6
              - gRPC errors: https://grpc.github.io/grpc/core/md_doc_statuscodes.html
          type: integer
          format: int32
          x-field-uid: 1
        kind:
          description: |-
            Classification of error originating from within API server that may not be mapped to the value in `code`.
            Absence of this field may indicate that the error did not originate from within API server.
          type: string
          x-enum:
            validation:
              x-field-uid: 1
            internal:
              x-field-uid: 2
          x-field-uid: 2
          enum:
          - validation
          - internal
        errors:
          description: |-
            List of error messages generated while executing the request.
          type: array
          items:
            type: string
          x-field-uid: 3
    Warning:
      description: |-
        A list of warnings that have occurred while executing the request.
      type: object
      properties:
        warnings:
          description: |-
            A list of any system specific warnings that have occurred while
            executing the request.
          type: array
          items:
            type: string
          x-field-uid: 1
