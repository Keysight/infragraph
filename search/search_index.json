{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"Home","text":""},{"location":"#describing-cluster-infrastructure-as-a-graph","title":"Describing Cluster Infrastructure as a Graph","text":"<p>Modern AI systems, comprising diverse scale-up and scale-out interconnect topologies that integrate complex heterogeneous components, connected together via diverse means, face a lack of standardized overall infrastructure description. This hinders benchmarking, simulation, and emulation. infra.proto introduces a graph-based schema to describe AI/HPC infrastructure.</p> <p>To create an infrastructure as a graph one can use messages from infra.proto. The messages allow a user to easily create logical infrastructure as vertexes and edges. This can be scale up further to describe a massive infrastructure without duplicating content.</p> <p>infra.proto is a Protocol Buffers (Protobuf) message that serves as the core data model for defining and designing the infrastructure. Protobuf is a schema-based, strongly typed format that models data as messages with defined fields and types in a .proto file. This schema enables efficient serialization and deserialization of structured data.</p> <p>While Protobuf itself uses a compact binary format, protobuf data can be converted to human-readable formats like JSON and YAML for easier inspection, configuration, and integration with text-based tools. This README uses YAML for its readability and suitability for configuration and data serialization tasks. YAML's clear syntax for nested structures and lists complements the Protobuf-defined data model.</p>"},{"location":"#features","title":"Features","text":"<p>Cluster Infrastructure as a graph is an actively developed specification, with contributions from real use cases. The model defines the following components to define a infrastructure:</p> <ul> <li>Device definitions with ability to model its internals as a graph</li> <li>Device Components allowing users to define the device internal components like:<ul> <li>nic</li> <li>ports</li> <li>npus</li> </ul> </li> <li>Links definition for:<ul> <li>components interconnect</li> <li>device interconnect</li> <li>Defining the bandwidth of the links</li> </ul> </li> <li>Connections between:<ul> <li>internal components of a device</li> <li>one device to another</li> </ul> </li> </ul> <p>Explore an in-depth explanation of the topology model, covering its structure, essential components, and how it supports efficient design and analysis. This resource provides valuable insights into the principles behind topology and how to apply them effectively.</p>"},{"location":"#annotation","title":"Annotation","text":"<p>This section provides a comprehensive guide on how a user can annotate various parts of infrastructre and add more details like DeviceType, Rank Identifier and so on. It covers the model description with examples for binding physical attributes with the logical infrastructure definition.</p>"},{"location":"#getting-started-with-topology-creation","title":"Getting Started With Topology Creation","text":"<p>This walkthrough guide demonstrates how anyone can create a topology from scratch, highlighting key steps and best practices to build a solid foundation. It offers a clear, step-by-step approach that makes topology creation accessible to beginners and experts alike.</p>"},{"location":"#community","title":"Community","text":"<p>Use our community resources to get help with Infrastructure As A Graph:</p> <ul> <li>Infrastructure As A Graph on Github</li> </ul>"},{"location":"annotate/","title":"Binding Logical Infrastructure with Custom Attributes","text":"<p>The primary purpose of infra.proto is to define and design a generic network fabric. This enables end users to specify the devices as nodes and links as edges. The data model also allows for the definition and design of devices by adding links and components within the device, modeling the device internals as a subgraph. Another data model, annotate.proto, allows for the definition and binding of various parameters within the generic infrastructure. Users can bind:</p> <ul> <li>Vendor-specific data</li> <li>Additional qualities of the infrastructure</li> <li>Specific device performance attributes, such as:</li> <li>Latency</li> <li>Routing tables</li> </ul> <p>This helps to add more context and content to infrastructure elements.</p> <p>The main objective is to decouple various bindings from the infrastructure, separating the concerns of designing the logical infrastructure from the additional data needed for specific use-cases.</p>"},{"location":"annotate/#example-annotating-device-instances-to-device-type","title":"Example: Annotating Device Instances to device type","text":"<p>Lets annotate devices to types in our previous example:</p> <p>The proposal is to include a <code>Device Type</code> for our infrastructure devices, with the types being <code>physical_switch</code>, <code>physical_host</code>, <code>vm_host</code>, and <code>vm_switch</code>. This categorization would offer additional insights into the nature of the device. Annotating the device instances present in our infra, we get the following schema:</p> YAML Definition <pre><code>- targets:\n    - infrastructure: Infrastructure\n  data:\n    name: DeviceTypes\n    value:\n      \"@type\": type.googleapis.com/google.protobuf.ListValue\n      value:\n        - device_instance: host\n          device_type: physical_host\n        - device_instance: susw\n          device_type: physical_switch\n        - device_instance: sosw\n          device_type: physical_switch\n</code></pre> <p></p> JSON Definition <pre><code>[\n  {\n    \"targets\": [\n      {\n        \"infrastructure\": \"Infrastructure\"\n      }\n    ],\n    \"data\": {\n      \"name\": \"DeviceTypes\",\n      \"value\": {\n        \"@type\": \"type.googleapis.com/google.protobuf.ListValue\",\n        \"value\": [\n          {\n            \"device_instance\": \"host\",\n            \"device_type\": \"physical_host\"\n          },\n          {\n            \"device_instance\": \"rack_switch\",\n            \"device_type\": \"physical_switch\"\n          }\n        ]\n      }\n    }\n  }\n]\n</code></pre> <p></p> <p>We need to set the target, a list of elements defined in the infrastructure, and provide a value. The value contains a schema defining the <code>device_instance</code> and its associated <code>device_type</code>.</p> <p>Note: The schema can be internal to an organization.</p>"},{"location":"annotate/#example-annotating-scale-up-switch-with-open-config-interface","title":"Example: Annotating Scale Up Switch with Open Config Interface","text":"<p>Another example is to define an <code>OpenConfigInterface</code> for our <code>scale up switch(sosw)</code> :</p> YAML Definition <pre><code>- targets:\n    - device_instance: sosw\n  data:\n    name: OpenConfigInterface\n    value:\n      \"@type\": type.googleapis.com/google.protobuf.Struct\n      value:\n        config:\n          type: ...\n          mtu: ...\n          loopback-mode: ...\n          enabled: ...\n</code></pre> <p></p> JSON Definition <pre><code>[\n  {\n    \"targets\": [\n      {\n        \"device_instance\": \"sosw\"\n      }\n    ],\n    \"data\": {\n      \"name\": \"OpenConfigInterface\",\n      \"value\": {\n        \"@type\": \"type.googleapis.com/google.protobuf.Struct\",\n        \"value\": {\n          \"config\": {\n            \"type\": [],\n            \"mtu\": [],\n            \"loopback-mode\": [],\n            \"enabled\": []\n          }\n        }\n      }\n    }\n  }\n]\n</code></pre> <p></p>"},{"location":"create/","title":"Building A Cluster","text":""},{"location":"create/#lets-describe-a-cluster-using-infra-proto-data-model","title":"Lets Describe a Cluster Using Infra Proto Data Model","text":"<p>The main steps in designing a network infrastructure using infra.proto is as follows:</p> <ul> <li> <p>Creating Inventory: Here we define the devices type and the external links type that will be used to describe the infrastructure.</p> </li> <li> <p>Defining Devices: Here we define a single device for each device type that is present in the infrastructure, its inside components and links inside</p> <ul> <li>Define Component</li> <li>Define Links to connect the components with-in the device</li> <li>Create Connection between Components using Links</li> </ul> </li> <li> <p>Defining External Links: Here we define the external link type that connects two devices</p> </li> <li> <p>Building the infrastructure as graph</p> </li> <li>Instantiating devices: Use the device definition in the inventory as a template to create multiple devices for the infrastructure.</li> <li>Defining connections: Use the external link definition to create connections between device instances.</li> </ul> <p>Follow these steps to design a Scale Up and Out Infrastructure.</p>"},{"location":"create/#creating-device-inventory","title":"Creating Device Inventory","text":"<p>Device inventory outlines the necessary devices for infrastructure, including components and links. It acts as a blueprint to create and connect instances, aiming to define once and reuse multiple times for optimal space complexity. For example, in a network with 100 switches (50 each of 2 types) connected by 100G ethernet links, the inventory will only specify the 2 switch types and the 100G ethernet link type.</p> <p>Note that the entire device does not need to be described in full detail. The level of device detail should be dictated by the needs of the application.</p> <p>To define a Device:</p> <ul> <li>use the <code>Component</code> message to define individual components (vertexes) that are present in a device</li> <li>use the <code>Component - count</code> field to scale up the number of components in the device</li> <li>use the <code>Link</code> message to define different link types within the device</li> <li>use the <code>Device</code> message to contain <code>Component</code> and <code>Link</code> messages</li> <li>use the <code>Device - connections</code> field to connect components (vertexes) to each other with an associated link to form an edge</li> <li>the format of a <code>connections</code> string is described in the infra.proto file</li> </ul> <p>Now we will be designing a 4 port generic switch as a part of device inventory.</p>"},{"location":"create/#defining-2-port-scale-up-switch","title":"Defining 2 port scale up switch","text":"<p>Lets define a simple 2 port scale up switch. </p> <p>This switch is made of two front panel ports. </p> <p>User can define this switch with one major \"port\" components inside it. These components can be viewed as nodes in a graph.</p> YAML Definition <pre><code>inventory:\n  devices:\n    SCALE_UP_SWITCH:\n      name: SCALE_UP_SWITCH\n      components:\n        port:\n          count: 2\n          name: port\n          nic:\n            ethernet: {}\n      connections: []\n      links: {}\n</code></pre> <p></p> JSON Definition <pre><code>{\n  \"inventory\": {\n    \"devices\": {\n      \"SCALE_UP_SWITCH\": {\n        \"name\": \"SCALE_UP_SWITCH\",\n        \"components\": {\n            \"port\": {\n                \"name\": \"port\",\n                \"count\": 2,\n                \"nic\": {\n                    \"ethernet\": { }\n                }\n            }\n        },\n        \"links\": {\n        },\n        \"connections\": [\n        ]\n    }\n  }\n}\n</code></pre> <p></p> <p>We have specified a scale up switch with 2 port components. Now we can define a scale out switch with 4 port components.</p>"},{"location":"create/#defining-4-port-scale-out-switch","title":"Defining 4 port scale out switch","text":"<p>Lets define a simple 2 port scale up switch. </p> <p>This switch is made of four front panel ports. </p> <p>User can define this switch with one major \"port\" components inside it. These components are analogous to a node in a graph.</p> YAML Definition <pre><code>inventory:\n  devices:\n    SCALE_OUT_SWITCH:\n      name: SCALE_OUT_SWITCH\n      components:\n        port:\n          count: 4\n          name: port\n          nic:\n            ethernet: {}\n      connections: []\n      links: {}\n</code></pre> <p></p> JSON Definition <pre><code>{\n    \"inventory\": {\n        \"devices\": {\n            \"SCALE_OUT_SWITCH\": {\n                \"name\": \"SCALE_OUT_SWITCH\",\n                \"components\": {\n                    \"port\": {\n                        \"name\": \"port\",\n                        \"count\": 4,\n                        \"nic\": {\n                            \"ethernet\": { }\n                        }\n                    }\n                },\n                \"links\": {\n                },\n                \"connections\": [\n                ]  \n            },\n        }\n    }\n}\n</code></pre> <p></p>"},{"location":"create/#design-host-with-4-nics-and-single-npu","title":"Design host with 4 nics and single npu","text":"<p>Let's design a host with 4 nics and a single npu</p> <p></p> <p>Our Host has two interconnected components: - 4 nics  - 1 npu</p> <p>These components are connected to each other via a pcie connection. Therefore to connect two different components, we can use the following notation:</p> <p><code>&lt;source&gt;.&lt;link&gt;.&lt;destination&gt;</code></p> <p>The <code>&lt;source&gt;</code> contains the source component and its index. The <code>&lt;destination&gt;</code> specifies the destination component and its index. The link joins the source and the destination. Therefore, the connection would look something like this:</p> <pre><code>&lt;source&gt;.&lt;src_index&gt;.&lt;link&gt;.&lt;destination&gt;.&lt;dst_index&gt;\n</code></pre> <p>These components can be defined as node in a graph which are connected through an edge (pcie) link in this case. We need to define the links as well as connections with which the whole device definition is defined below:</p> YAML Definition <pre><code>inventory:\n  devices:\n    HOST:\n      name: HOST\n      components:\n        nic:\n          name: nic\n          count: 4\n          nic:\n            ethernet: {}\n        npu:\n          name: npu\n          count: 1\n          npu: {}\n      links:\n        pcie:\n          name: pcie\n      connections:\n      - npu.0.pcie.nic.0\n      - npu.0.pcie.nic.1\n      - npu.0.pcie.nic.2\n      - npu.0.pcie.nic.3\n</code></pre> <p></p> JSON Definition <pre><code>{\n    \"inventory\": {\n        \"devices\": {\n            \"HOST\": {\n                \"name\": \"HOST\",\n                \"components\": {\n                    \"npu\": {\n                        \"name\": \"npu\",\n                        \"count\": 1,\n                        \"npu\": { }\n                    },\n                    \"nic\": {\n                        \"name\": \"nic\",\n                        \"count\": 4,\n                        \"nic\": {\n                            \"ethernet\": { }\n                        }\n                    }\n                },\n                \"links\": {\n                    \"pcie\": {\n                        \"name\": \"pcie\"\n                    }\n                },\n                \"connections\": [\n                    \"npu.0.pcie.nic.0\",\n                    \"npu.0.pcie.nic.1\",\n                    \"npu.0.pcie.nic.2\",\n                    \"npu.0.pcie.nic.3\"\n                ]\n            }\n        }\n    }\n}\n</code></pre> <p></p>"},{"location":"create/#defining-links","title":"Defining Links","text":"<p>The objective is to define an infrastructure build using the switch and hosts defined earlier. The goal is to build an infrastructure where one switch is directly connected to four hosts via 100G Ethernet.</p> <p></p> <p>We have defined a switch and a host in the inventory, but not the 100G links. Let's define a 100G ethernet link as follows:</p> YAML Definition <pre><code>inventory:\n  links:\n  eth:\n    name: eth\n    description: Ethernet link\n    bandwidth:\n      gbps: 100\n</code></pre> <p></p> JSON Definition <pre><code>{\n  \"inventory\": {\n    \"links\": {\n      \"eth\": {\n        \"name\": \"eth\",\n        \"description\": \"Ethernet link\",\n        \"bandwidth\": {\n          \"gbps\": 100\n        }\n      }\n    }\n  }\n}\n</code></pre> <p></p> <p>In this example, we have defined a link <code>name: eth</code> with a bandwidth of 100 gbps. Subsequently, four such links will be utilized to connect four devices to four switch ports, as illustrated in the above image.</p>"},{"location":"create/#creating-device-instances","title":"Creating Device Instances","text":"<p>We can scale the infrastructure by using the <code>device instance</code> message. To create a fully connected topology, we instantiate the defined devices by giving a new <code>instance_name</code> to the device followed by a count. Therefore to create instances for host, scale up and scale out switch, we define the instance as following:</p> YAML Definition <pre><code>deviceInstances:\n  host:\n    count: 4\n    device: HOST\n    name: host\n  sosw:\n    count: 2\n    device: SCALE_OUT_SWITCH\n    name: sosw\n  susw:\n    count: 4\n    device: SCALE_UP_SWITCH\n    name: susw\n</code></pre> <p></p> JSON Definition <pre><code>{\n    \"deviceInstances\": {\n        \"host\": {\n            \"name\": \"host\",\n            \"device\": \"HOST\",\n            \"count\": 4\n        },\n        \"susw\": {\n            \"name\": \"susw\",\n            \"device\": \"SCALE_UP_SWITCH\",\n            \"count\": 4\n        },\n        \"sosw\": {\n            \"name\": \"sosw\",\n            \"device\": \"SCALE_OUT_SWITCH\",\n            \"count\": 2\n        }\n    }\n}\n</code></pre> <p></p> <p>The devices are defined under the <code>inventory - devices</code> section, serving as a blueprint or template. These devices need to be instantiated to create the entire infrastructure, similar to creating objects of a class. With the specified count, multiple copies of the devices are created starting from index 0.</p> <p>Next, these device instances need to be connected over 100G ethernet links as illustrated in the picture above.</p>"},{"location":"create/#connecting-device-instances","title":"Connecting Device Instances","text":"<p>Connections between the devices are made by the components of the device and links defined. Therefore, to connect two devices together, we need to define the connection in the following format:</p> <pre><code>&lt;src_device&gt;.&lt;dev_index&gt;&lt;src_component&gt;&lt;comp_index&gt;.&lt;link&gt;.&lt;dst_device&gt;.&lt;dev_index&gt;&lt;dst_component&gt;&lt;comp_index&gt;\n</code></pre> <p>The <code>&lt;src_device&gt;.&lt;dev_index&gt;&lt;src_component&gt;&lt;comp_index&gt;</code> specifies the source device, its index, component, and the component's index. The same format applies to the destination. The link defines the connection between source and destination.</p> <p>A \".\" separator separates infrastructure elements. To connect a <code>host</code> with the <code>scale_up_switch</code>, we define the connection as:</p> YAML Definition <pre><code>connections:\n  - host.0.nic.0.eth.susw.0.port.0\n</code></pre> <p></p> JSON Definition <pre><code>{\n  \"connections\": [\"host.0.nic.0.eth.susw.0.port.0\"]\n}\n</code></pre> <p></p> <p>The host at index 0, via its nic component 0, is connected to port 0 of scale up switch or <code>susw</code> 0. The link between this source and destination has a bandwidth of eth. This describes the first link shown in the above picture.</p> <p>Creating the links:</p> YAML Definition <pre><code>connections:\n    - host.0.nic.0.eth.susw.0.port.0\n    - host.0.nic.1.eth.susw.1.port.0\n    - host.0.nic.2.eth.sosw.0.port.0\n    - host.0.nic.3.eth.sosw.1.port.0\n    - host.1.nic.0.eth.susw.0.port.1\n    - host.1.nic.1.eth.susw.1.port.1\n    - host.1.nic.2.eth.sosw.0.port.1\n    - host.1.nic.3.eth.sosw.1.port.1\n    - host.2.nic.0.eth.susw.2.port.0\n    - host.2.nic.1.eth.susw.3.port.0\n    - host.2.nic.2.eth.sosw.0.port.2\n    - host.2.nic.3.eth.sosw.1.port.2\n    - host.3.nic.0.eth.susw.2.port.1\n    - host.3.nic.1.eth.susw.3.port.1\n    - host.3.nic.2.eth.sosw.0.port.3\n    - host.3.nic.3.eth.sosw.1.port.3\n</code></pre> <p></p> JSON Definition <pre><code>{\n  \"connections\": [\n        \"host.0.nic.0.eth.susw.0.port.0\",\n        \"host.0.nic.1.eth.susw.1.port.0\",\n        \"host.0.nic.2.eth.sosw.0.port.0\",\n        \"host.0.nic.3.eth.sosw.1.port.0\",\n        \"host.1.nic.0.eth.susw.0.port.1\",\n        \"host.1.nic.1.eth.susw.1.port.1\",\n        \"host.1.nic.2.eth.sosw.0.port.1\",\n        \"host.1.nic.3.eth.sosw.1.port.1\",\n        \"host.2.nic.0.eth.susw.2.port.0\",\n        \"host.2.nic.1.eth.susw.3.port.0\",\n        \"host.2.nic.2.eth.sosw.0.port.2\",\n        \"host.2.nic.3.eth.sosw.1.port.2\",\n        \"host.3.nic.0.eth.susw.2.port.1\",\n        \"host.3.nic.1.eth.susw.3.port.1\",\n        \"host.3.nic.2.eth.sosw.0.port.3\",\n        \"host.3.nic.3.eth.sosw.1.port.3\"\n    ]\n}\n</code></pre> <p></p>"},{"location":"create/#the-complete-example","title":"The Complete Example","text":"<p>After combining all the definitions, we can arrive at the final design:</p> YAML Definition <pre><code>inventory:\n  devices:\n    HOST:\n      name: HOST\n      components:\n        nic:\n          name: nic\n          count: 4\n          nic:\n            ethernet: {}\n        npu:\n          name: npu\n          count: 1\n          npu: {}\n      links:\n        pcie:\n          name: pcie\n      connections:\n      - npu.0.pcie.nic.0\n      - npu.0.pcie.nic.1\n      - npu.0.pcie.nic.2\n      - npu.0.pcie.nic.3\n    SCALE_OUT_SWITCH:\n      name: SCALE_OUT_SWITCH\n      components:\n        port:\n          name: port\n          count: 4\n          nic:\n            ethernet: {}\n      links: {}\n      connections: []\n    SCALE_UP_SWITCH:\n      name: SCALE_UP_SWITCH\n      components:\n        port:\n          name: port\n          count: 2\n          nic:\n            ethernet: {}\n      links: {}\n      connections: []\n  links:\n    eth:\n      name: eth\n      bandwidth:\n        gbps: 100\n      description: Ethernet link\ndeviceInstances:\n  host:\n    name: host\n    device: HOST\n    count: 4\n  sosw:\n    name: sosw\n    device: SCALE_OUT_SWITCH\n    count: 2\n  susw:\n    name: susw\n    device: SCALE_UP_SWITCH\n    count: 4\nconnections:\n- host.0.nic.0.eth.susw.0.port.0\n- host.0.nic.1.eth.susw.1.port.0\n- host.0.nic.2.eth.sosw.0.port.0\n- host.0.nic.3.eth.sosw.1.port.0\n- host.1.nic.0.eth.susw.0.port.1\n- host.1.nic.1.eth.susw.1.port.1\n- host.1.nic.2.eth.sosw.0.port.1\n- host.1.nic.3.eth.sosw.1.port.1\n- host.2.nic.0.eth.susw.2.port.0\n- host.2.nic.1.eth.susw.3.port.0\n- host.2.nic.2.eth.sosw.0.port.2\n- host.2.nic.3.eth.sosw.1.port.2\n- host.3.nic.0.eth.susw.2.port.1\n- host.3.nic.1.eth.susw.3.port.1\n- host.3.nic.2.eth.sosw.0.port.3\n- host.3.nic.3.eth.sosw.1.port.3\n</code></pre> <p></p> JSON Definition <pre><code>{\n    \"inventory\": {\n        \"devices\": {\n            \"SCALE_OUT_SWITCH\": {\n                \"name\": \"SCALE_OUT_SWITCH\",\n                \"components\": {\n                    \"port\": {\n                        \"name\": \"port\",\n                        \"count\": 4,\n                        \"nic\": {\n                            \"ethernet\": { }\n                        }\n                    }\n                },\n                \"links\": {\n                },\n                \"connections\": [\n                ]\n            },\n            \"SCALE_UP_SWITCH\": {\n                \"name\": \"SCALE_UP_SWITCH\",\n                \"components\": {\n                    \"port\": {\n                        \"name\": \"port\",\n                        \"count\": 2,\n                        \"nic\": {\n                            \"ethernet\": { }\n                        }\n                    }\n                },\n                \"links\": {\n                },\n                \"connections\": [\n                ]\n            },\n            \"HOST\": {\n                \"name\": \"HOST\",\n                \"components\": {\n                    \"npu\": {\n                        \"name\": \"npu\",\n                        \"count\": 1,\n                        \"npu\": { }\n                    },\n                    \"nic\": {\n                        \"name\": \"nic\",\n                        \"count\": 4,\n                        \"nic\": {\n                            \"ethernet\": { }\n                        }\n                    }\n                },\n                \"links\": {\n                    \"pcie\": {\n                        \"name\": \"pcie\"\n                    }\n                },\n                \"connections\": [\n                    \"npu.0.pcie.nic.0\",\n                    \"npu.1.pcie.nic.1\",\n                    \"npu.2.pcie.nic.2\",\n                    \"npu.3.pcie.nic.3\"\n                ]\n            }\n        },\n        \"links\": {\n            \"eth\": {\n                \"name\": \"eth\",\n                \"description\": \"Ethernet link\",\n                \"bandwidth\": {\n                    \"gbps\": 100\n                }\n            }\n        }\n    },\n    \"deviceInstances\": {\n        \"host\": {\n            \"name\": \"host\",\n            \"device\": \"HOST\",\n            \"count\": 4\n        },\n        \"susw\": {\n            \"name\": \"susw\",\n            \"device\": \"SCALE_UP_SWITCH\",\n            \"count\": 4\n        },\n        \"sosw\": {\n            \"name\": \"sosw\",\n            \"device\": \"SCALE_OUT_SWITCH\",\n            \"count\": 2\n        }\n    },\n    \"connections\": [\n        \"host.0.nic.0.eth.susw.0.port.0\",\n        \"host.0.nic.1.eth.susw.1.port.0\",\n        \"host.0.nic.2.eth.sosw.0.port.0\",\n        \"host.0.nic.3.eth.sosw.1.port.0\",\n        \"host.1.nic.0.eth.susw.0.port.1\",\n        \"host.1.nic.1.eth.susw.1.port.1\",\n        \"host.1.nic.2.eth.sosw.0.port.1\",\n        \"host.1.nic.3.eth.sosw.1.port.1\",\n        \"host.2.nic.0.eth.susw.2.port.0\",\n        \"host.2.nic.1.eth.susw.3.port.0\",\n        \"host.2.nic.2.eth.sosw.0.port.2\",\n        \"host.2.nic.3.eth.sosw.1.port.2\",\n        \"host.3.nic.0.eth.susw.2.port.1\",\n        \"host.3.nic.1.eth.susw.3.port.1\",\n        \"host.3.nic.2.eth.sosw.0.port.3\",\n        \"host.3.nic.3.eth.sosw.1.port.3\"\n    ]\n}\n</code></pre> <p></p>"},{"location":"examples/","title":"Infrastructure As A Graph Examples:","text":""},{"location":"examples/#clos-topology","title":"CLOS Topology","text":""},{"location":"examples/#1-tier-8-hosts","title":"1 tier - 8 hosts","text":"<p>Infrastructure As A Graph for a Rack Switch having 8 host can be defined as:</p> YAML Definition <pre><code>inventory:\n  devices:\n    GENERIC_HOST:\n      name: GENERIC_HOST\n      components:\n        nic:\n          name: nic\n          count: 1\n          nic:\n            ethernet: {}\n        npu:\n          name: npu\n          count: 1\n          npu:\n            memory: MEM_UNSPECIFIED\n        npu_interconnect_switch:\n          name: npu_interconnect_switch\n          count: 1\n          switch:\n            custom: {}\n      connections:\n        - npu.0.pcie.nic.0\n        - npu.0.npu_interconnect.npu_interconnect_switch.0\n      links:\n        npu_interconnect:\n          name: npu_interconnect\n          bandwidth:\n            gbps: 1600\n        pcie:\n          name: pcie\n    TIER_0:\n      name: TIER_0\n      components:\n        asic:\n          name: asic\n          count: 1\n          cpu:\n            memory: MEM_RAM\n        port:\n          name: port\n          count: 8\n          nic:\n            ethernet: {}\n      connections:\n        - port.0.mii.asic.0\n        - port.1.mii.asic.0\n        - port.2.mii.asic.0\n        - port.3.mii.asic.0\n        - port.4.mii.asic.0\n        - port.5.mii.asic.0\n        - port.6.mii.asic.0\n        - port.7.mii.asic.0\n      links:\n        mii:\n          name: mii\n  links:\n    100_gbps:\n      name: 100_gbps\n      bandwidth:\n        gbps: 100\n      description: 100 Gbps Ethernet link\ndevice_instances:\n  generic:\n    name: generic\n    count: 8\n    device: GENERIC_HOST\n  tier_0:\n    name: tier_0\n    count: 1\n    device: TIER_0\nconnections:\n  - generic.0.nic.0.100_gbps.tier_0.0.port.0\n  - generic.1.nic.0.100_gbps.tier_0.0.port.1\n  - generic.2.nic.0.100_gbps.tier_0.0.port.2\n  - generic.3.nic.0.100_gbps.tier_0.0.port.3\n  - generic.4.nic.0.100_gbps.tier_0.0.port.4\n  - generic.5.nic.0.100_gbps.tier_0.0.port.5\n  - generic.6.nic.0.100_gbps.tier_0.0.port.6\n  - generic.7.nic.0.100_gbps.tier_0.0.port.7\n</code></pre> <p></p> JSON Definition <pre><code>{\n    \"inventory\": {\n        \"devices\": {\n            \"GENERIC_HOST\": {\n                \"name\": \"GENERIC_HOST\",\n                \"components\": {\n                    \"npu_interconnect_switch\": {\n                        \"name\": \"npu_interconnect_switch\",\n                        \"count\": 1,\n                        \"switch\": {\n                            \"custom\": {}\n                        }\n                    },\n                    \"nic\": {\n                        \"name\": \"nic\",\n                        \"count\": 1,\n                        \"nic\": {\n                            \"ethernet\": {}\n                        }\n                    },\n                    \"npu\": {\n                        \"name\": \"npu\",\n                        \"count\": 1,\n                        \"npu\": {\n                            \"memory\": \"MEM_UNSPECIFIED\"\n                        }\n                    }\n                },\n                \"links\": {\n                    \"pcie\": {\n                        \"name\": \"pcie\"\n                    },\n                    \"npu_interconnect\": {\n                        \"name\": \"npu_interconnect\",\n                        \"bandwidth\": {\n                            \"gbps\": 1600\n                        }\n                    }\n                },\n                \"connections\": [\n                    \"npu.0.pcie.nic.0\",\n                    \"npu.0.npu_interconnect.npu_interconnect_switch.0\"\n                ]\n            },\n            \"TIER_0\": {\n                \"name\": \"TIER_0\",\n                \"components\": {\n                    \"port\": {\n                        \"name\": \"port\",\n                        \"count\": 8,\n                        \"nic\": {\n                            \"ethernet\": {}\n                        }\n                    },\n                    \"asic\": {\n                        \"name\": \"asic\",\n                        \"count\": 1,\n                        \"cpu\": {\n                            \"memory\": \"MEM_RAM\"\n                        }\n                    }\n                },\n                \"links\": {\n                    \"mii\": {\n                        \"name\": \"mii\"\n                    }\n                },\n                \"connections\": [\n                    \"port.0.mii.asic.0\",\n                    \"port.1.mii.asic.0\",\n                    \"port.2.mii.asic.0\",\n                    \"port.3.mii.asic.0\",\n                    \"port.4.mii.asic.0\",\n                    \"port.5.mii.asic.0\",\n                    \"port.6.mii.asic.0\",\n                    \"port.7.mii.asic.0\"\n                ]\n            }\n        },\n        \"links\": {\n            \"100_gbps\": {\n                \"name\": \"100_gbps\",\n                \"description\": \"100 Gbps Ethernet link\",\n                \"bandwidth\": {\n                    \"gbps\": 100\n                }\n            }\n        }\n    },\n    \"device_instances\": {\n        \"tier_0\": {\n            \"name\": \"tier_0\",\n            \"device\": \"TIER_0\",\n            \"count\": 1\n        },\n        \"generic\": {\n            \"name\": \"generic\",\n            \"device\": \"GENERIC_HOST\",\n            \"count\": 8\n        }\n    },\n    \"connections\": [\n        \"generic.0.nic.0.100_gbps.tier_0.0.port.0\",\n        \"generic.1.nic.0.100_gbps.tier_0.0.port.1\",\n        \"generic.2.nic.0.100_gbps.tier_0.0.port.2\",\n        \"generic.3.nic.0.100_gbps.tier_0.0.port.3\",\n        \"generic.4.nic.0.100_gbps.tier_0.0.port.4\",\n        \"generic.5.nic.0.100_gbps.tier_0.0.port.5\",\n        \"generic.6.nic.0.100_gbps.tier_0.0.port.6\",\n        \"generic.7.nic.0.100_gbps.tier_0.0.port.7\"\n    ]\n}\n</code></pre> <p></p>"},{"location":"examples/#dragonfly-topology","title":"Dragonfly Topology","text":""},{"location":"examples/#a4-p2-h2","title":"a=4, p=2, h=2","text":"<p>A dragonfly topology with 4 routers per group, 2 terminals per router and 2 outerlinks per every router can be represented in the following manner:</p> YAML Definition <pre><code>inventory:\n  devices:\n    generic_host:\n      name: generic_host\n      components:\n        nic:\n          name: nic\n          count: 1\n          nic:\n            ethernet: {}\n        npu:\n          name: npu\n          count: 1\n          npu: {}\n      connections:\n        - npu.0.pcie.nic.0\n      links:\n        pcie:\n          name: pcie\n          type: LINK_PCIE\n    generic_switch:\n      name: generic_switch\n      components:\n        asic:\n          name: asic\n          count: 1\n          cpu:\n            memory: MEM_RAM\n        nic:\n          name: nic\n          count: 7\n          nic:\n            ethernet: {}\n      connections:\n        - nic.0.mii.asic.0\n        - nic.1.mii.asic.0\n        - nic.2.mii.asic.0\n        - nic.3.mii.asic.0\n        - nic.4.mii.asic.0\n        - nic.5.mii.asic.0\n        - nic.6.mii.asic.0\n      links:\n        mii:\n          name: mii\n          type: LINK_CUSTOM\n  links:\n    100Gbps:\n      bandwidth:\n        gbps: 100\n      name: 100Gbps\n      type: LINK_ETHERNET\n\ndeviceInstances:\n  host:\n    name: host\n    device: generic_host\n    count: 72\n  switch:\n    name: switch\n    device: generic_switch\n    count: 36\nconnections:\n  - switch.0.nic.0.100Gbps.host.0.nic.0\n  - switch.0.nic.1.100Gbps.host.1.nic.0\n  - switch.1.nic.0.100Gbps.host.2.nic.0\n  - switch.1.nic.1.100Gbps.host.3.nic.0\n  - switch.2.nic.0.100Gbps.host.4.nic.0\n  - switch.2.nic.1.100Gbps.host.5.nic.0\n  - switch.3.nic.0.100Gbps.host.6.nic.0\n  - switch.3.nic.1.100Gbps.host.7.nic.0\n  - switch.0.nic.2.100Gbps.switch.1.nic.2\n  - switch.0.nic.3.100Gbps.switch.2.nic.2\n  - switch.0.nic.4.100Gbps.switch.3.nic.2\n  - switch.1.nic.3.100Gbps.switch.2.nic.3\n  - switch.1.nic.4.100Gbps.switch.3.nic.3\n  - switch.2.nic.4.100Gbps.switch.3.nic.4\n  - switch.4.nic.0.100Gbps.host.8.nic.0\n  - switch.4.nic.1.100Gbps.host.9.nic.0\n  - switch.5.nic.0.100Gbps.host.10.nic.0\n  - switch.5.nic.1.100Gbps.host.11.nic.0\n  - switch.6.nic.0.100Gbps.host.12.nic.0\n  - switch.6.nic.1.100Gbps.host.13.nic.0\n  - switch.7.nic.0.100Gbps.host.14.nic.0\n  - switch.7.nic.1.100Gbps.host.15.nic.0\n  - switch.4.nic.2.100Gbps.switch.5.nic.2\n  - switch.4.nic.3.100Gbps.switch.6.nic.2\n  - switch.4.nic.4.100Gbps.switch.7.nic.2\n  - switch.5.nic.3.100Gbps.switch.6.nic.3\n  - switch.5.nic.4.100Gbps.switch.7.nic.3\n  - switch.6.nic.4.100Gbps.switch.7.nic.4\n  - switch.8.nic.0.100Gbps.host.16.nic.0\n  - switch.8.nic.1.100Gbps.host.17.nic.0\n  - switch.9.nic.0.100Gbps.host.18.nic.0\n  - switch.9.nic.1.100Gbps.host.19.nic.0\n  - switch.10.nic.0.100Gbps.host.20.nic.0\n  - switch.10.nic.1.100Gbps.host.21.nic.0\n  - switch.11.nic.0.100Gbps.host.22.nic.0\n  - switch.11.nic.1.100Gbps.host.23.nic.0\n  - switch.8.nic.2.100Gbps.switch.9.nic.2\n  - switch.8.nic.3.100Gbps.switch.10.nic.2\n  - switch.8.nic.4.100Gbps.switch.11.nic.2\n  - switch.9.nic.3.100Gbps.switch.10.nic.3\n  - switch.9.nic.4.100Gbps.switch.11.nic.3\n  - switch.10.nic.4.100Gbps.switch.11.nic.4\n  - switch.12.nic.0.100Gbps.host.24.nic.0\n  - switch.12.nic.1.100Gbps.host.25.nic.0\n  - switch.13.nic.0.100Gbps.host.26.nic.0\n  - switch.13.nic.1.100Gbps.host.27.nic.0\n  - switch.14.nic.0.100Gbps.host.28.nic.0\n  - switch.14.nic.1.100Gbps.host.29.nic.0\n  - switch.15.nic.0.100Gbps.host.30.nic.0\n  - switch.15.nic.1.100Gbps.host.31.nic.0\n  - switch.12.nic.2.100Gbps.switch.13.nic.2\n  - switch.12.nic.3.100Gbps.switch.14.nic.2\n  - switch.12.nic.4.100Gbps.switch.15.nic.2\n  - switch.13.nic.3.100Gbps.switch.14.nic.3\n  - switch.13.nic.4.100Gbps.switch.15.nic.3\n  - switch.14.nic.4.100Gbps.switch.15.nic.4\n  - switch.16.nic.0.100Gbps.host.32.nic.0\n  - switch.16.nic.1.100Gbps.host.33.nic.0\n  - switch.17.nic.0.100Gbps.host.34.nic.0\n  - switch.17.nic.1.100Gbps.host.35.nic.0\n  - switch.18.nic.0.100Gbps.host.36.nic.0\n  - switch.18.nic.1.100Gbps.host.37.nic.0\n  - switch.19.nic.0.100Gbps.host.38.nic.0\n  - switch.19.nic.1.100Gbps.host.39.nic.0\n  - switch.16.nic.2.100Gbps.switch.17.nic.2\n  - switch.16.nic.3.100Gbps.switch.18.nic.2\n  - switch.16.nic.4.100Gbps.switch.19.nic.2\n  - switch.17.nic.3.100Gbps.switch.18.nic.3\n  - switch.17.nic.4.100Gbps.switch.19.nic.3\n  - switch.18.nic.4.100Gbps.switch.19.nic.4\n  - switch.20.nic.0.100Gbps.host.40.nic.0\n  - switch.20.nic.1.100Gbps.host.41.nic.0\n  - switch.21.nic.0.100Gbps.host.42.nic.0\n  - switch.21.nic.1.100Gbps.host.43.nic.0\n  - switch.22.nic.0.100Gbps.host.44.nic.0\n  - switch.22.nic.1.100Gbps.host.45.nic.0\n  - switch.23.nic.0.100Gbps.host.46.nic.0\n  - switch.23.nic.1.100Gbps.host.47.nic.0\n  - switch.20.nic.2.100Gbps.switch.21.nic.2\n  - switch.20.nic.3.100Gbps.switch.22.nic.2\n  - switch.20.nic.4.100Gbps.switch.23.nic.2\n  - switch.21.nic.3.100Gbps.switch.22.nic.3\n  - switch.21.nic.4.100Gbps.switch.23.nic.3\n  - switch.22.nic.4.100Gbps.switch.23.nic.4\n  - switch.24.nic.0.100Gbps.host.48.nic.0\n  - switch.24.nic.1.100Gbps.host.49.nic.0\n  - switch.25.nic.0.100Gbps.host.50.nic.0\n  - switch.25.nic.1.100Gbps.host.51.nic.0\n  - switch.26.nic.0.100Gbps.host.52.nic.0\n  - switch.26.nic.1.100Gbps.host.53.nic.0\n  - switch.27.nic.0.100Gbps.host.54.nic.0\n  - switch.27.nic.1.100Gbps.host.55.nic.0\n  - switch.24.nic.2.100Gbps.switch.25.nic.2\n  - switch.24.nic.3.100Gbps.switch.26.nic.2\n  - switch.24.nic.4.100Gbps.switch.27.nic.2\n  - switch.25.nic.3.100Gbps.switch.26.nic.3\n  - switch.25.nic.4.100Gbps.switch.27.nic.3\n  - switch.26.nic.4.100Gbps.switch.27.nic.4\n  - switch.28.nic.0.100Gbps.host.56.nic.0\n  - switch.28.nic.1.100Gbps.host.57.nic.0\n  - switch.29.nic.0.100Gbps.host.58.nic.0\n  - switch.29.nic.1.100Gbps.host.59.nic.0\n  - switch.30.nic.0.100Gbps.host.60.nic.0\n  - switch.30.nic.1.100Gbps.host.61.nic.0\n  - switch.31.nic.0.100Gbps.host.62.nic.0\n  - switch.31.nic.1.100Gbps.host.63.nic.0\n  - switch.28.nic.2.100Gbps.switch.29.nic.2\n  - switch.28.nic.3.100Gbps.switch.30.nic.2\n  - switch.28.nic.4.100Gbps.switch.31.nic.2\n  - switch.29.nic.3.100Gbps.switch.30.nic.3\n  - switch.29.nic.4.100Gbps.switch.31.nic.3\n  - switch.30.nic.4.100Gbps.switch.31.nic.4\n  - switch.32.nic.0.100Gbps.host.64.nic.0\n  - switch.32.nic.1.100Gbps.host.65.nic.0\n  - switch.33.nic.0.100Gbps.host.66.nic.0\n  - switch.33.nic.1.100Gbps.host.67.nic.0\n  - switch.34.nic.0.100Gbps.host.68.nic.0\n  - switch.34.nic.1.100Gbps.host.69.nic.0\n  - switch.35.nic.0.100Gbps.host.70.nic.0\n  - switch.35.nic.1.100Gbps.host.71.nic.0\n  - switch.32.nic.2.100Gbps.switch.33.nic.2\n  - switch.32.nic.3.100Gbps.switch.34.nic.2\n  - switch.32.nic.4.100Gbps.switch.35.nic.2\n  - switch.33.nic.3.100Gbps.switch.34.nic.3\n  - switch.33.nic.4.100Gbps.switch.35.nic.3\n  - switch.34.nic.4.100Gbps.switch.35.nic.4\n  - switch.0.nic.5.100Gbps.switch.7.nic.5\n  - switch.0.nic.6.100Gbps.switch.11.nic.5\n  - switch.1.nic.5.100Gbps.switch.14.nic.5\n  - switch.1.nic.6.100Gbps.switch.18.nic.5\n  - switch.2.nic.5.100Gbps.switch.21.nic.5\n  - switch.2.nic.6.100Gbps.switch.25.nic.5\n  - switch.3.nic.5.100Gbps.switch.28.nic.5\n  - switch.3.nic.6.100Gbps.switch.32.nic.5\n  - switch.4.nic.5.100Gbps.switch.11.nic.6\n  - switch.4.nic.6.100Gbps.switch.15.nic.5\n  - switch.5.nic.5.100Gbps.switch.18.nic.6\n  - switch.5.nic.6.100Gbps.switch.22.nic.5\n  - switch.6.nic.5.100Gbps.switch.25.nic.6\n  - switch.6.nic.6.100Gbps.switch.29.nic.5\n  - switch.7.nic.6.100Gbps.switch.32.nic.6\n  - switch.8.nic.5.100Gbps.switch.15.nic.6\n  - switch.8.nic.6.100Gbps.switch.19.nic.5\n  - switch.9.nic.5.100Gbps.switch.22.nic.6\n  - switch.9.nic.6.100Gbps.switch.26.nic.5\n  - switch.10.nic.5.100Gbps.switch.29.nic.6\n  - switch.10.nic.6.100Gbps.switch.33.nic.5\n  - switch.12.nic.5.100Gbps.switch.19.nic.6\n  - switch.12.nic.6.100Gbps.switch.23.nic.5\n  - switch.13.nic.5.100Gbps.switch.26.nic.6\n  - switch.13.nic.6.100Gbps.switch.30.nic.5\n  - switch.14.nic.6.100Gbps.switch.33.nic.6\n  - switch.16.nic.5.100Gbps.switch.23.nic.6\n  - switch.16.nic.6.100Gbps.switch.27.nic.5\n  - switch.17.nic.5.100Gbps.switch.30.nic.6\n  - switch.17.nic.6.100Gbps.switch.34.nic.5\n  - switch.20.nic.5.100Gbps.switch.27.nic.6\n  - switch.20.nic.6.100Gbps.switch.31.nic.5\n  - switch.21.nic.6.100Gbps.switch.34.nic.6\n  - switch.24.nic.5.100Gbps.switch.31.nic.6\n  - switch.24.nic.6.100Gbps.switch.35.nic.5\n  - switch.28.nic.6.100Gbps.switch.35.nic.6\n</code></pre> <p></p> JSON Definition <pre><code>{\n    \"inventory\": {\n        \"devices\": {\n            \"generic_switch\": {\n                \"name\": \"generic_switch\",\n                \"components\": {\n                    \"asic\": {\n                        \"name\": \"asic\",\n                        \"count\": 1,\n                        \"cpu\": {\n                            \"memory\": \"MEM_RAM\"\n                        }\n                    },\n                    \"nic\": {\n                        \"name\": \"nic\",\n                        \"count\": 7,\n                        \"nic\": {\n                            \"ethernet\": { }\n                        }\n                    }\n                },\n                \"links\": {\n                    \"mii\": {\n                        \"name\": \"mii\",\n                        \"type\": \"LINK_CUSTOM\"\n                    }\n                },\n                \"connections\": [\n                    \"nic.0.mii.asic.0\",\n                    \"nic.1.mii.asic.0\",\n                    \"nic.2.mii.asic.0\",\n                    \"nic.3.mii.asic.0\",\n                    \"nic.4.mii.asic.0\",\n                    \"nic.5.mii.asic.0\",\n                    \"nic.6.mii.asic.0\"\n                ]\n            },\n            \"generic_host\": {\n                \"name\": \"generic_host\",\n                \"components\": {\n                    \"npu\": {\n                        \"name\": \"npu\",\n                        \"count\": 1,\n                        \"npu\": { }\n                    },\n                    \"nic\": {\n                        \"name\": \"nic\",\n                        \"count\": 1,\n                        \"nic\": {\n                            \"ethernet\": { }\n                        }\n                    }\n                },\n                \"links\": {\n                    \"pcie\": {\n                        \"name\": \"pcie\",\n                        \"type\": \"LINK_PCIE\"\n                    }\n                },\n                \"connections\": [\n                    \"npu.0.pcie.nic.0\"\n                ]\n            }\n        },\n        \"links\": {\n            \"100Gbps\": {\n                \"name\": \"100Gbps\",\n                \"type\": \"LINK_ETHERNET\",\n                \"bandwidth\": {\n                    \"gbps\": 100\n                }\n            }\n        }\n    },\n    \"deviceInstances\": {\n        \"switch\": {\n            \"name\": \"switch\",\n            \"device\": \"generic_switch\",\n            \"count\": 36\n        },\n        \"host\": {\n            \"name\": \"host\",\n            \"device\": \"generic_host\",\n            \"count\": 72\n        }\n    },\n    \"connections\": [\n        \"switch.0.nic.0.100Gbps.host.0.nic.0\",\n        \"switch.0.nic.1.100Gbps.host.1.nic.0\",\n        \"switch.1.nic.0.100Gbps.host.2.nic.0\",\n        \"switch.1.nic.1.100Gbps.host.3.nic.0\",\n        \"switch.2.nic.0.100Gbps.host.4.nic.0\",\n        \"switch.2.nic.1.100Gbps.host.5.nic.0\",\n        \"switch.3.nic.0.100Gbps.host.6.nic.0\",\n        \"switch.3.nic.1.100Gbps.host.7.nic.0\",\n        \"switch.0.nic.2.100Gbps.switch.1.nic.2\",\n        \"switch.0.nic.3.100Gbps.switch.2.nic.2\",\n        \"switch.0.nic.4.100Gbps.switch.3.nic.2\",\n        \"switch.1.nic.3.100Gbps.switch.2.nic.3\",\n        \"switch.1.nic.4.100Gbps.switch.3.nic.3\",\n        \"switch.2.nic.4.100Gbps.switch.3.nic.4\",\n        \"switch.4.nic.0.100Gbps.host.8.nic.0\",\n        \"switch.4.nic.1.100Gbps.host.9.nic.0\",\n        \"switch.5.nic.0.100Gbps.host.10.nic.0\",\n        \"switch.5.nic.1.100Gbps.host.11.nic.0\",\n        \"switch.6.nic.0.100Gbps.host.12.nic.0\",\n        \"switch.6.nic.1.100Gbps.host.13.nic.0\",\n        \"switch.7.nic.0.100Gbps.host.14.nic.0\",\n        \"switch.7.nic.1.100Gbps.host.15.nic.0\",\n        \"switch.4.nic.2.100Gbps.switch.5.nic.2\",\n        \"switch.4.nic.3.100Gbps.switch.6.nic.2\",\n        \"switch.4.nic.4.100Gbps.switch.7.nic.2\",\n        \"switch.5.nic.3.100Gbps.switch.6.nic.3\",\n        \"switch.5.nic.4.100Gbps.switch.7.nic.3\",\n        \"switch.6.nic.4.100Gbps.switch.7.nic.4\",\n        \"switch.8.nic.0.100Gbps.host.16.nic.0\",\n        \"switch.8.nic.1.100Gbps.host.17.nic.0\",\n        \"switch.9.nic.0.100Gbps.host.18.nic.0\",\n        \"switch.9.nic.1.100Gbps.host.19.nic.0\",\n        \"switch.10.nic.0.100Gbps.host.20.nic.0\",\n        \"switch.10.nic.1.100Gbps.host.21.nic.0\",\n        \"switch.11.nic.0.100Gbps.host.22.nic.0\",\n        \"switch.11.nic.1.100Gbps.host.23.nic.0\",\n        \"switch.8.nic.2.100Gbps.switch.9.nic.2\",\n        \"switch.8.nic.3.100Gbps.switch.10.nic.2\",\n        \"switch.8.nic.4.100Gbps.switch.11.nic.2\",\n        \"switch.9.nic.3.100Gbps.switch.10.nic.3\",\n        \"switch.9.nic.4.100Gbps.switch.11.nic.3\",\n        \"switch.10.nic.4.100Gbps.switch.11.nic.4\",\n        \"switch.12.nic.0.100Gbps.host.24.nic.0\",\n        \"switch.12.nic.1.100Gbps.host.25.nic.0\",\n        \"switch.13.nic.0.100Gbps.host.26.nic.0\",\n        \"switch.13.nic.1.100Gbps.host.27.nic.0\",\n        \"switch.14.nic.0.100Gbps.host.28.nic.0\",\n        \"switch.14.nic.1.100Gbps.host.29.nic.0\",\n        \"switch.15.nic.0.100Gbps.host.30.nic.0\",\n        \"switch.15.nic.1.100Gbps.host.31.nic.0\",\n        \"switch.12.nic.2.100Gbps.switch.13.nic.2\",\n        \"switch.12.nic.3.100Gbps.switch.14.nic.2\",\n        \"switch.12.nic.4.100Gbps.switch.15.nic.2\",\n        \"switch.13.nic.3.100Gbps.switch.14.nic.3\",\n        \"switch.13.nic.4.100Gbps.switch.15.nic.3\",\n        \"switch.14.nic.4.100Gbps.switch.15.nic.4\",\n        \"switch.16.nic.0.100Gbps.host.32.nic.0\",\n        \"switch.16.nic.1.100Gbps.host.33.nic.0\",\n        \"switch.17.nic.0.100Gbps.host.34.nic.0\",\n        \"switch.17.nic.1.100Gbps.host.35.nic.0\",\n        \"switch.18.nic.0.100Gbps.host.36.nic.0\",\n        \"switch.18.nic.1.100Gbps.host.37.nic.0\",\n        \"switch.19.nic.0.100Gbps.host.38.nic.0\",\n        \"switch.19.nic.1.100Gbps.host.39.nic.0\",\n        \"switch.16.nic.2.100Gbps.switch.17.nic.2\",\n        \"switch.16.nic.3.100Gbps.switch.18.nic.2\",\n        \"switch.16.nic.4.100Gbps.switch.19.nic.2\",\n        \"switch.17.nic.3.100Gbps.switch.18.nic.3\",\n        \"switch.17.nic.4.100Gbps.switch.19.nic.3\",\n        \"switch.18.nic.4.100Gbps.switch.19.nic.4\",\n        \"switch.20.nic.0.100Gbps.host.40.nic.0\",\n        \"switch.20.nic.1.100Gbps.host.41.nic.0\",\n        \"switch.21.nic.0.100Gbps.host.42.nic.0\",\n        \"switch.21.nic.1.100Gbps.host.43.nic.0\",\n        \"switch.22.nic.0.100Gbps.host.44.nic.0\",\n        \"switch.22.nic.1.100Gbps.host.45.nic.0\",\n        \"switch.23.nic.0.100Gbps.host.46.nic.0\",\n        \"switch.23.nic.1.100Gbps.host.47.nic.0\",\n        \"switch.20.nic.2.100Gbps.switch.21.nic.2\",\n        \"switch.20.nic.3.100Gbps.switch.22.nic.2\",\n        \"switch.20.nic.4.100Gbps.switch.23.nic.2\",\n        \"switch.21.nic.3.100Gbps.switch.22.nic.3\",\n        \"switch.21.nic.4.100Gbps.switch.23.nic.3\",\n        \"switch.22.nic.4.100Gbps.switch.23.nic.4\",\n        \"switch.24.nic.0.100Gbps.host.48.nic.0\",\n        \"switch.24.nic.1.100Gbps.host.49.nic.0\",\n        \"switch.25.nic.0.100Gbps.host.50.nic.0\",\n        \"switch.25.nic.1.100Gbps.host.51.nic.0\",\n        \"switch.26.nic.0.100Gbps.host.52.nic.0\",\n        \"switch.26.nic.1.100Gbps.host.53.nic.0\",\n        \"switch.27.nic.0.100Gbps.host.54.nic.0\",\n        \"switch.27.nic.1.100Gbps.host.55.nic.0\",\n        \"switch.24.nic.2.100Gbps.switch.25.nic.2\",\n        \"switch.24.nic.3.100Gbps.switch.26.nic.2\",\n        \"switch.24.nic.4.100Gbps.switch.27.nic.2\",\n        \"switch.25.nic.3.100Gbps.switch.26.nic.3\",\n        \"switch.25.nic.4.100Gbps.switch.27.nic.3\",\n        \"switch.26.nic.4.100Gbps.switch.27.nic.4\",\n        \"switch.28.nic.0.100Gbps.host.56.nic.0\",\n        \"switch.28.nic.1.100Gbps.host.57.nic.0\",\n        \"switch.29.nic.0.100Gbps.host.58.nic.0\",\n        \"switch.29.nic.1.100Gbps.host.59.nic.0\",\n        \"switch.30.nic.0.100Gbps.host.60.nic.0\",\n        \"switch.30.nic.1.100Gbps.host.61.nic.0\",\n        \"switch.31.nic.0.100Gbps.host.62.nic.0\",\n        \"switch.31.nic.1.100Gbps.host.63.nic.0\",\n        \"switch.28.nic.2.100Gbps.switch.29.nic.2\",\n        \"switch.28.nic.3.100Gbps.switch.30.nic.2\",\n        \"switch.28.nic.4.100Gbps.switch.31.nic.2\",\n        \"switch.29.nic.3.100Gbps.switch.30.nic.3\",\n        \"switch.29.nic.4.100Gbps.switch.31.nic.3\",\n        \"switch.30.nic.4.100Gbps.switch.31.nic.4\",\n        \"switch.32.nic.0.100Gbps.host.64.nic.0\",\n        \"switch.32.nic.1.100Gbps.host.65.nic.0\",\n        \"switch.33.nic.0.100Gbps.host.66.nic.0\",\n        \"switch.33.nic.1.100Gbps.host.67.nic.0\",\n        \"switch.34.nic.0.100Gbps.host.68.nic.0\",\n        \"switch.34.nic.1.100Gbps.host.69.nic.0\",\n        \"switch.35.nic.0.100Gbps.host.70.nic.0\",\n        \"switch.35.nic.1.100Gbps.host.71.nic.0\",\n        \"switch.32.nic.2.100Gbps.switch.33.nic.2\",\n        \"switch.32.nic.3.100Gbps.switch.34.nic.2\",\n        \"switch.32.nic.4.100Gbps.switch.35.nic.2\",\n        \"switch.33.nic.3.100Gbps.switch.34.nic.3\",\n        \"switch.33.nic.4.100Gbps.switch.35.nic.3\",\n        \"switch.34.nic.4.100Gbps.switch.35.nic.4\",\n        \"switch.0.nic.5.100Gbps.switch.7.nic.5\",\n        \"switch.0.nic.6.100Gbps.switch.11.nic.5\",\n        \"switch.1.nic.5.100Gbps.switch.14.nic.5\",\n        \"switch.1.nic.6.100Gbps.switch.18.nic.5\",\n        \"switch.2.nic.5.100Gbps.switch.21.nic.5\",\n        \"switch.2.nic.6.100Gbps.switch.25.nic.5\",\n        \"switch.3.nic.5.100Gbps.switch.28.nic.5\",\n        \"switch.3.nic.6.100Gbps.switch.32.nic.5\",\n        \"switch.4.nic.5.100Gbps.switch.11.nic.6\",\n        \"switch.4.nic.6.100Gbps.switch.15.nic.5\",\n        \"switch.5.nic.5.100Gbps.switch.18.nic.6\",\n        \"switch.5.nic.6.100Gbps.switch.22.nic.5\",\n        \"switch.6.nic.5.100Gbps.switch.25.nic.6\",\n        \"switch.6.nic.6.100Gbps.switch.29.nic.5\",\n        \"switch.7.nic.6.100Gbps.switch.32.nic.6\",\n        \"switch.8.nic.5.100Gbps.switch.15.nic.6\",\n        \"switch.8.nic.6.100Gbps.switch.19.nic.5\",\n        \"switch.9.nic.5.100Gbps.switch.22.nic.6\",\n        \"switch.9.nic.6.100Gbps.switch.26.nic.5\",\n        \"switch.10.nic.5.100Gbps.switch.29.nic.6\",\n        \"switch.10.nic.6.100Gbps.switch.33.nic.5\",\n        \"switch.12.nic.5.100Gbps.switch.19.nic.6\",\n        \"switch.12.nic.6.100Gbps.switch.23.nic.5\",\n        \"switch.13.nic.5.100Gbps.switch.26.nic.6\",\n        \"switch.13.nic.6.100Gbps.switch.30.nic.5\",\n        \"switch.14.nic.6.100Gbps.switch.33.nic.6\",\n        \"switch.16.nic.5.100Gbps.switch.23.nic.6\",\n        \"switch.16.nic.6.100Gbps.switch.27.nic.5\",\n        \"switch.17.nic.5.100Gbps.switch.30.nic.6\",\n        \"switch.17.nic.6.100Gbps.switch.34.nic.5\",\n        \"switch.20.nic.5.100Gbps.switch.27.nic.6\",\n        \"switch.20.nic.6.100Gbps.switch.31.nic.5\",\n        \"switch.21.nic.6.100Gbps.switch.34.nic.6\",\n        \"switch.24.nic.5.100Gbps.switch.31.nic.6\",\n        \"switch.24.nic.6.100Gbps.switch.35.nic.5\",\n        \"switch.28.nic.6.100Gbps.switch.35.nic.6\"\n    ]\n}\n</code></pre> <p></p>"},{"location":"model/","title":"Model","text":""},{"location":"model/#formal-model-infrastructure-as-a-graph","title":"Formal Model - Infrastructure As A Graph","text":"<p>The formal model specification can be found on GitHub under Infrastructure organization. The model has been defined as a protobuf message because Protocol Buffers provide a highly efficient, compact, and language-neutral way to serialize structured data. This binary serialization format results in significantly smaller message sizes compared to text-based formats like JSON or YAML, which reduces network bandwidth usage and storage requirements</p>"},{"location":"model/#building-blocks","title":"Building Blocks","text":"<p>The infra.proto provides multiple building blocks to define the infrastructure. These blocks include:</p> <ul> <li>Inventory</li> <li>Device</li> <li>Components</li> <li>Links</li> <li>Device Instances</li> <li>Connections</li> </ul>"},{"location":"model/#devices","title":"Devices","text":"<pre><code>message Device {\n  optional string name = 1;\n  map&lt;string, Component&gt; components = 3;\n  map&lt;string, Link&gt; links = 4;\n  repeated string connections = 5;\n}\n</code></pre> <p>The Device message defines a device which is a part of the infrastructure. This contains a collection of components, links between the components and the connections. The main fields are: * name: An optional field allowing users to define the name of the device * components: A dictionary which stores the component message with the key as the component name. This message is defined in the later section * links: Another dictionary which stores the link message with the link name.  * connections: A list of connections that describe how components are connected to each other in a single device. Each element of this list is a string that describe the component connection and is described as:     <pre><code>source_component_name \".\" source_component_index \".\" link_name \".\" destination_component_name \".\" destination_component_index \n</code></pre>     example:     <pre><code>nic.0.pcie.cpu.0\nnpu.0.pcie.nvswitch.0\nasic.0.mii.nic.0\n</code></pre>     The source_component_name and destination_component_name is the name field present in the component message. This name also corresponds to the key of the components dictionary field which is a part of the device message. Each component message holds a count field which defines the number of components present in the device. These fields are defined later in the components section.</p>"},{"location":"model/#components","title":"Components","text":"<pre><code>message Component {\n  optional string name = 1;\n  optional uint32 count = 2;\n  oneof type {\n    CustomComponent custom = 10;\n    Cpu cpu = 11;\n    Npu npu = 12;\n    Nic nic = 13;\n    Switch switch = 14;\n  }\n}\n</code></pre> <p>The component message defines three major fields: * name: An optional field which gives the name of the component. The name is also provided as a key in the components dictionary field type of device message. * count: The count defines the total components present. Lets assume we have a nic component with a count of 8. This would create 8 instances of the nic component whose properies would remain the same with a zero based indexing. This is analogous to the concept of classes and objects where the component message acts as the blueprint and count indicates the number of objects created.  * type: The component datamodel allows to describe component of a certain type. The type can be:     * CPU     * NPU     * NIC     * Switch     * Custom</p> <pre><code>Each of these types are defined as another message. The section below describes the message format of component type.\n</code></pre>"},{"location":"model/#cpu-component","title":"CPU Component","text":"<p><pre><code>message Cpu {\n  MemoryType memory = 1;\n}\n</code></pre> This message defines the CPU type component. This allows the user to assign a certain memory type to the CPU. The MemoryType is covered in the later section.</p>"},{"location":"model/#npu-component","title":"NPU Component","text":"<pre><code>message Npu {\n  MemoryType memory = 1;\n}\n</code></pre> <p>This message defines the NPU type component. This allows the user to assign a certain memory type to the NPU. The MemoryType is covered in the later section.</p>"},{"location":"model/#custom-component","title":"Custom Component","text":"<pre><code>message CustomComponent {\n  MemoryType memory = 1;\n}\n</code></pre> <p>This message defines the CustomComponent type component. This allows the user to assign a certain memory type to the Custom Component. The MemoryType is covered in the later section.</p>"},{"location":"model/#memory-type","title":"Memory Type","text":"<p><pre><code>enum MemoryType {\n  MEM_UNSPECIFIED = 0;\n\n  // random access memory\n  MEM_RAM = 1;\n\n  // high bandwidth memory interface for 3D stacked sync dynamic random-access memory\n  MEM_HBM = 2;\n\n  // memory that uses compute express link interconnect to the cpu\n  MEM_CXL = 3;\n}\n</code></pre> The user can set either of the memory type to the CPU, NPU or CustomComponent Type. The memory could be either: * Unspecified * Random Access Memory * High Bandwidth Memory Interface * Compute Express Link</p> <p>The enum can be extended to add more memory types which can be used by custom component</p>"},{"location":"model/#nic-component","title":"NIC Component","text":"<pre><code>message Nic {\n  oneof type {\n    Ethernet ethernet = 10;\n    Infiniband infinband = 11;\n  }\n}\n\nmessage Infiniband {\n}\n\nmessage Ethernet {\n}\n</code></pre> <p>This describes the NIC Component. Each nic component can be of the following type: * Ethernet * Infiniband These types are defined as a message. </p>"},{"location":"model/#switch-component","title":"Switch Component","text":"<pre><code>message Switch {\n  oneof type {\n    Pcie pcie = 1;\n    NvLink nvswitch = 2;\n    Custom custom = 3;\n  }\n}\n\nmessage Pcie {\n}\n\nmessage NvLink {\n}\n\nmessage Custom {\n}\n</code></pre> <p>This section defines the Switch Component type. The switch component can be either of the following: * pcie * nvlink * custom</p> <p>These types are defined as a message. </p>"},{"location":"model/#link","title":"Link","text":"<pre><code>message Link {\n  optional string name = 1;\n  optional string description = 2;\n  Bandwidth bandwidth = 10;\n}\n\nmessage Bandwidth {\n  oneof type {\n    uint32 gbps = 1;\n    uint32 gBs = 2;\n    uint32 gts = 3;\n  }\n}\n</code></pre> <p>The Link message allows to define a \"link\" between the device as well as components. This model has three fields: * name * description * bandwidth</p> <p>The Bandwidth is defined as a message and allows to define the link bandwidth as: * gbps: gigabits per second * gBs: gigabytes per second * gts: giga transfers per second</p> <p>These take an unsigned integer value. The Links use the Bandwidth message model to define the link speed. </p>"},{"location":"model/#inventory","title":"Inventory","text":"<pre><code>message Inventory {\n  map&lt;string, Device&gt; devices = 1;\n  map&lt;string, Link&gt; links = 2;\n}\n</code></pre> <p>Inventory is a collection of all unique types of Devices and Links in the infrastructure. This has two major fields: * devices: </p> <pre><code>A collection of all unique types of devices in the infrastructure. The uniqueness is determined by the Device.name field.\n</code></pre> <ul> <li> <p>links:</p> <p>A collection of all unique types of links in the infrastructure. These links can be reused multiple times when creating connections between devices. The key is the Link.name which is used to guard against duplicates.</p> </li> </ul>"},{"location":"model/#device-instances","title":"Device Instances","text":"<pre><code>message DeviceInstances {\n  optional string name = 1;\n  optional string device = 2;\n  optional uint32 count = 3;\n}\n</code></pre> <p>The Device Instances message is used to instantiate the Device in the infrastructure. This message contains three fields: * name: the name of the device instance. This is used to categorize the device. For example: a switch defined in the inventory - devices message can be used as a Rack Switch, POD Switch or a Spine Switch. The name allows to create/provide a unique name to a set of devices.  * device: The name of the actual device that exist in the inventory - devices  field. This links the device which we want to use. * count: The number of instances of device in the infrastructure under this name. This should always be &gt;= 1. This also indiates the number of instances we need for a specific device under a certain name. This is again analogous to component modelling but done on a device level. The indexing starts at 0 and provides a unique identifier to create a device instance.</p>"},{"location":"model/#infrastructure","title":"Infrastructure","text":"<pre><code>message Infrastructure {\n  Inventory inventory = 1;\n  map&lt;string, DeviceInstances&gt; device_instances = 2;\n  repeated string connections = 3;\n}\n</code></pre> <p>The Infrastructure message establishes an inventory of devices and links, instances of the inventory, connectivity between those instances and any custom user information about devices, components, links and instances.</p> <p>This holds the inventory which contains the devices, links; the device_instances map that hold all the devices instantiated and a list of connections. The connection format is defined as a string of the following elements separated by a \".\"</p> <pre><code>source_device_instance_name\nsource_device_index \nsource_device_component_name\nsource_device_component_index\nlink_name\ndestination_device_instance_name\ndestination_device_index\ndestination_device_component_name\ndestination_device_component_index\n</code></pre> <p>This utilizes the device instances naming convention with the count which internally links to the  device message that defines the component, its name and the count and connects two different device instances with the link name that is defined in the inventory. </p>"},{"location":"model/#building-infrastructure","title":"Building Infrastructure","text":"<p>The model allows us to define devices, its internal components, as nodes and links as edges and creates connection as a link between the nodes thereby allowing to create a graph based representation. A step by step guide to create infrastructure is defined in Building A Cluster.</p>"}]}